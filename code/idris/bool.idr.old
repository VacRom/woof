module boolOld
import pair

data bool = true | false

id: bool -> bool
id b = b

constFalse: bool -> bool
constFalse _ = false

constTrue: bool -> bool
constTrue _ = true

not: bool -> bool
not true = false
not _ = true

andp: pair bool bool -> bool
andp (mkPair true true) = true
andp (mkPair _ _) = false

orp: pair bool bool -> bool
orp (mkPair false true) = true
orp (mkPair true _) = true
orp (mkPair _ _) = false

nandp: pair bool bool -> bool
nandp (mkPair a b) = not (andp (mkPair a b))

xorp: pair bool bool -> bool
xorp (mkPair true true) = false
xorp (mkPair a b) = orp (mkPair a b)

-- Exam Problem #2 There are 8 possible ways to fill in the result
  -- column for a truth table for a binary Boolean function, and there
  -- are thus exactly 8 such functions, and no more.

-- Binary function, explicit.

pand: bool -> bool -> bool
pand true = bool.id
pand false = constFalse

por: bool -> bool -> bool
por true = constTrue
por false = bool.id

pxor: bool -> bool -> bool
pxor true = not
pxor false = bool.id 

pnand: bool -> bool -> bool
pnand true = not
pnand false = constTrue

-- Binary functions, implicit.

and: bool -> bool -> bool
and true true = true
and _ _ = false

or: bool -> bool -> bool
or true _ = true
or false n = n

xor: bool -> bool -> bool
xor true n = not n
xor false n = n

nand: bool -> bool -> bool
nand true n = not n
nand false _ = true

uf: bool -> bool
uf = (and true)

-- do all and listn
