module list_natOld

import nat
import pair
import bool

data list_nat = nil | cons nat list_nat
-- L = {}
lO: list_nat
lO = nil

-- L = {0}
l1: list_nat
l1 = cons O lO

-- L = {1,2}
l2: list_nat
l2 = cons (S O) (cons (S (S O)) nil)

-- L = {1,2,3}
l3: list_nat
l3 = cons (S O) (cons (S (S O)) (cons (S (S (S O))) nil))

-- L = {0,1,2,3,4,...,n}
ln: nat -> list_nat
ln O = cons O nil
ln (S n) = cons (S n) (ln n)

-- L = {m, ..., n} EXPERIMENTAL, NOT FINISHED
lnn: pair nat nat -> list_nat
lnn (mkPair m n) = cons m nil
lnn (mkPair m (S n)) = cons (S n) (lnn (mkPair m n))

length: list_nat -> nat
length nil = O
length (cons n l') = S (length l')

--Template = cons x (cons x (cons x nil))

-- {5,6,7}
list1: list_nat
list1 = cons (S (S (S (S (S O))))) (cons (S (S (S (S (S (S O)))))) (cons (S (S (S (S (S (S (S O))))))) nil))
-- {1,2,3}
list2: list_nat
list2 = cons (S O) (cons (S (S O)) (cons (S (S (S O))) nil))

-- Remember that cons is denoted with types nat list_nat
append: pair list_nat list_nat -> list_nat
append (mkPair nil b) = b
append (mkPair (cons h t) b) = cons h (append (mkPair t b))

-- Try out 'append (mkPair list1 list2)'
