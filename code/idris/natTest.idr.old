import nat
import pair
import bool
-- Here are some test cases for nat.idr
-- #5 exp -- given a pair of natural numbers, (x, n), return the value of x raised to the nth power.
--exp (mkPair x (S n)) = exp (mkPair x (S n))
--Even though it's not completely true, let us assume the rule that
  --n^0=1 for all n.

-- 0^0 will return 1.
xOnO: pair nat nat
xOnO = mkPair O O

-- 0^1 will return 0.
xOnS: pair nat nat
xOnS = mkPair O (S O)

-- 1^0 will return 1.
xSnO: pair nat nat
xSnO = mkPair (S O) O

-- 3^2 will return 9.
xSSSnSS: pair nat nat
xSSSnSS = mkPair (S (S (S O))) (S (S O))


-- #6 lep -- given a pair of natural numbers, (a, b), return true if a is less than or equal to b, otherwise return false.
-- a < b OR a = b

-- #7 eqp -- given a pair of natural numbers, (a, b), return true if a is equal to b, otherwise return false.
-- a = b

-- #8 gtp -- given a pair of natural numbers, (a, b), return true if a is greater than b, otherwise return false.
-- a > b

-- #9 gep -- given a pair of natural numbers, (a, b), return true of a is greater than or equal to b.
-- a > b OR a = b

-- #10 ltp -- given a pair of natural numbers, (a, b), return true if a is less than b.
-- a < b

-- We will use the following test cases.

--a = 0, b = 0
aObO: pair nat nat
aObO = mkPair O O

--a = 1, b = 0
aSbO: pair nat nat
aSbO = mkPair (S O) O

--a = 0, b = 1
aObS: pair nat nat
aObS = mkPair O (S O)

--a = 1, b = 1
aSbS: pair nat nat
aSbS = mkPair (S O) (S O)

--a = 3, b = 1
aSSSbS: pair nat nat
aSSSbS = mkPair (S (S (S O))) (S O)

--I have tested these cases for all of these functions and they work fine.
